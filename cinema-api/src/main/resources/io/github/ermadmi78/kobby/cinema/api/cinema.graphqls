directive @required on FIELD_DEFINITION
directive @default on FIELD_DEFINITION
directive @selection on FIELD_DEFINITION

scalar JSON
scalar Date

schema {
    query: Query
    mutation: Mutation
}

type Query {
    # Find country by id. Returns null if not found.
    country(id: ID!): Country

    # Find counries by name. Returns empty list if not found.
    countries(
        # Case sensitive name of country to search
        name: String,
        # Limit of result list (default 10). Put -1 to be unlimited.
        limit: Int! = 10,
        # Offset of result list (default 0).
        offset: Int! = 0
    ): [Country!]! @selection

    # Find film by id. Returns null if not found.
    film(id: ID!): Film

    # Find films by title and genre. Returns empty list if not found.
    films(
        # Case sensitive title of film to search
        title: String,
        # Genre of film to search
        genre: Genre,
        # Limit of result list (default 10). Put -1 to be unlimited.
        limit: Int! = 10,
        # Offset of result list (default 0).
        offset: Int! = 0
    ): [Film!]! @selection

    # Find actor by id. Returns null if not found.
    actor(id: ID!): Actor

    # Find actors by firstName, lastName, birthday and gender. Returns empty list if not found.
    actors(
        # Case sensitive first name of actor to search
        firstName: String,
        # Case sensitive last name of actor to search
        lastName: String,
        # Find actors whose birthday is greater than or equal to birthdayFrom
        birthdayFrom: Date,
        # Find actors whose birthday is less than or equal to birthdayTo
        birthdayTo: Date,
        # Gender of actor to search
        gender: Gender,
        # Limit of result list (default 10). Put -1 to be unlimited.
        limit: Int! = 10,
        # Offset of result list (default 0).
        offset: Int! = 0
    ): [Actor!]! @selection

    # Find entities by tags
    taggable(tags: [String!]!): [Taggable!]!
}

type Mutation {
    createCountry(title: String!): Country!
    createFilm(countryId: ID!, film: FilmInput!, tag: TagInput): Film! @selection
    createActor(countryId: ID!, actor: ActorInput!, tag: TagInput): Actor! @selection
    associate(filmId: ID!, actorId: ID!): Boolean!
    tagFilm(filmId: ID!, tagValue: String!): Boolean!
    tagActor(actorId: ID!, tagValue: String!): Boolean!
}

interface Entity {
    id: ID!
    fields: JSON!
}

interface Taggable implements Entity {
    id: ID!
    fields: JSON!
    tags: [Tag!]!
}


type Country implements Entity {
    id: ID!
    fields: JSON!

    name: String! @default

    # Find film by id. Returns null if not found.
    film(id: ID!): Film

    # Find films by title and genre. Returns empty list if not found.
    films(
        # Case sensitive title of film to search
        title: String,
        # Genre of film to search
        genre: Genre,
        # Limit of result list (default 10). Put -1 to be unlimited.
        limit: Int! = 10,
        # Offset of result list (default 0).
        offset: Int! = 0
    ): [Film!]! @selection

    # Find actor by id. Returns null if not found.
    actor(id: ID!): Actor

    # Find actors by firstName, lastName, birthday and gender. Returns empty list if not found.
    actors(
        # Case sensitive first name of actor to search
        firstName: String,
        # Case sensitive last name of actor to search
        lastName: String,
        # Find actors whose birthday is greater than or equal to birthdayFrom
        birthdayFrom: Date,
        # Find actors whose birthday is less than or equal to birthdayTo
        birthdayTo: Date,
        # Gender of actor to search
        gender: Gender,
        # Limit of result list (default 10). Put -1 to be unlimited.
        limit: Int! = 10,
        # Offset of result list (default 0).
        offset: Int! = 0
    ): [Actor!]! @selection

    # Find entities by tags
    taggable(tags: [String!]!): [Taggable!]!

    # Find native entities of this country
    native(
        # Limit of result list (default 10). Put -1 to be unlimited.
        limit: Int! = 10,
        # Offset of result list (default 0).
        offset: Int! = 0
    ): [Native!]! @selection
}

type Film implements Entity, Taggable {
    id: ID!
    fields: JSON!
    tags: [Tag!]!

    title: String! @default
    genre: Genre!

    countryId: ID!
    country: Country!
}

enum Genre {
    DRAMA
    COMEDY
    THRILLER
    HORROR
}

# входные данные по фильму
input FilmInput {
    title: String!
    genre: Genre!
}

# актер
type Actor implements Entity, Taggable {
    id: ID!
    fields: JSON!
    tags: [Tag!]!

    # имя
    firstName: String! @default
    lastName: String @default
    birthday: Date! @required
    gender: Gender!

    countryId: ID!
    country: Country!
}

enum Gender {
    MALE
    FEMALE
}

input ActorInput {
    firstName: String!
    lastName: String
    birthday: Date!
    gender: Gender!
}

type Tag {
    value: String! @required
}

input TagInput {
    value: String!
}

union Native = Actor | Film