directive @required on FIELD_DEFINITION
directive @default on FIELD_DEFINITION
directive @selection on FIELD_DEFINITION

scalar JSON
scalar DateTime

schema {
    query: Query
    mutation: Mutation
}

type Query {
    count: Int!

    country(id: ID!): Country
    countries(condition: String = "", limit: Int = -1, offset: Int = -1): [Country!]! @selection

    actor(id: ID!): Actor
    actors(condition: String = "", limit: Int = -1, offset: Int = -1): [Actor!]!

    film(id: ID!): Film
    films(condition: String = "", limit: Int = -1, offset: Int = -1): [Film!]!
}

type Mutation {
    createActor(countryId: ID!, actor: ActorInput): Actor! @selection
    createFilm(countryId: ID!, film: FilmInput!): Film!
    associate(actorId: ID!, filmId: ID!): Boolean!
    doSingle(single: SingleInput!): Single
}

interface Base {
    id: ID!
}

interface Entity implements Base {
    id: ID!
    createdAt: DateTime! @default
    updatedAt: DateTime! @default
}

type Country implements Entity, Base {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!

    actor(id: ID!): Actor @default
    actors(condition: String = "", limit: Int = -1, offset: Int = -1): [Actor!]! @selection
    actorsCount(condition: String!, limit: Int = -1, offset: Int = -1): Int @selection

    film(id: ID!): Film
    films(condition: String = "", limit: Int = -1, offset: Int = -1): [Film!]!

    allActorsAndFilms(condition: String = "", limit: Int = -1, offset: Int = -1): [Entity!]! @selection

    season(condition: String, limit: Int, offset: Int): Subject @selection
}

# актер
type Actor implements Entity, Base{
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!

    # имя
    firstName: String! @required
    lastName: String! @default
    middleName: String

    fields: JSON!

    countryId: ID!
    country: Country!

    # фильмы, в которых учавствовал актер
    films(
        # условие
        condition: String,
        # максимальное количество элементов
        limit: Int! = -1,
        # сдвиг
        offset: Int! = -1
    ): [Film!]! @required
}

input ActorInput {
    firstName: String!
    lastName: String!
    middleName: String
    fields: JSON!
}

type Film implements Entity, Base {
    id: ID!
    createdAt: DateTime!
    updatedAt: DateTime!

    name: String!
    genre: Genre!

    countryId: ID!
    country: Country!

    actors(condition: String = "", limit: Int = -1, offset: Int = -1): [Actor!]!
}

enum Genre {
    DRAMA
    COMEDY
    THRILLER
    HORROR
}

# входные данные по фильму
input FilmInput {
    # имя
    name: String!
    # жанр
    genre: Genre!
}

type Single {
    id: ID!
}

input SingleInput {
    id: ID!
}

union Subject = Actor | Film